# -*- coding: utf-8 -*-
"""Week13_LiveCoding_Tasks

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1r8TBsyJJrEm7r5cyjO4QDScxcyYoQk_q
"""

import pandas as pd
import numpy as np
import seaborn as sns ; sns.set()
import xlrd
# Reads File
book = xlrd.open_workbook(filename='List_of_products_exported.xls')
data = pd.read_excel(book,) # skiprows=5 gereksiz satırları atlar
data.head()

# Detects 0 if a line has more than 1 zeros
null_values = (data == 0).sum(axis=1)> 1
null_values = pd.DataFrame(null_values)
null_values_index = null_values[null_values[0]==True].index
# Delets rows if a line has more than 1 zeros
data.drop(index=null_values_index, inplace=True)
data.head()

data[data==0]=np.nan
data_firsttwo_columns = data.loc[:,"Code":"Product label"]
data_numeric_columns = data.loc[:,"Exported value in 2016":]
data_numeric_columns.interpolate(method="linear", limit_direction = 'both', axis=1, inplace=True)
data = pd.concat([data_firsttwo_columns, data_numeric_columns], axis=1)
data

"""X:
4 columns numeric values (export) (not include Encoded product categories)

y:
2020 export data

**TASK-13A:**

- train-test splitting (%70 %30)
- fit with train data via linear regression
- predict with using test data
- compare the y_test and y_model outputs
- display the result (accuracy, R2 value: coefficient of determination)

'''

"""

X= data.drop(["Exported value in 2020","Code","Product label"], axis=1) # Features
y = data["Exported value in 2020"] # Target

from sklearn.model_selection import train_test_split
Xtrain, Xtest, ytrain, ytest =train_test_split(X,y,random_state=1)

from sklearn.linear_model import LinearRegression # fit with train data via linear regression
model = LinearRegression()
model.fit(Xtrain, ytrain)
y_model = model.predict(Xtest)

df = pd.DataFrame({"Actual":ytest,"Predictid":y_model}) # compare the y_test and y_model outputs
df

from sklearn.metrics import r2_score
r2_score(ytest, y_model) # display the result (accuracy, R2 value: coefficient of determination)

"""**TASK-13B:**

- Please use the crossvalidation function for 5-fold (k=5) on X and y.
- Then report your findings and discuss them.
- Please follow a similar procedure as in Task-13A.

"""

from sklearn.model_selection import cross_val_score
cross_val_score(model, X,y, cv=5)

"""**TASK-13C:**

- Please provide train-test split on the dataset
- Please apply grid search on the same dataset again with train dataset 
- Please use linear regression with using the following parameters:
    fit_intercept
    normalize
- Then get the best model and visualize the best parameters
- Then use these parameters on the test set with illustrating the results
"""

# apply grid search
from sklearn.model_selection import GridSearchCV

# use linear regression with using the following parameters: fit_intercept normalize
param_grid = {'fit_intercept': [True, False],
              'normalize': [True, False]}

grid = GridSearchCV(LinearRegression(), param_grid, cv=5)

grid.fit(X,y);

grid.best_params_ # get the best model and visualize the best parameters

model = grid.best_estimator_

from sklearn.model_selection import cross_val_score
cross_val_score(model,X,y,cv=5)

X1=X["Exported value in 2019"].values.reshape(-1,1)
import matplotlib.pyplot as plt
X_test = X["Exported value in 2018"].values.reshape(-1,1)
X_test = np.linspace(0, 5000000, 5000)[:, None]
# Visualazation model with best values and selected data
plt.scatter(X1.ravel(), y)
lim = plt.axis()
y_test = model.fit(X1, y).predict(X_test)
plt.plot(X_test.ravel(), y_test);
plt.axis(lim);